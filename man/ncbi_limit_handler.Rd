% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/requests_handlers.R
\name{ncbi_limit_handler}
\alias{ncbi_limit_handler}
\title{Run function on a list/vector of elements following a specific timing in a future framework.}
\usage{
ncbi_limit_handler(
  data,
  api_rate = 3,
  fun,
  message = "LoremIpsum",
  seed = FALSE
)
}
\arguments{
\item{data}{The list/vector whose elements will be provided to the function in the 'fun' parameter.}

\item{api_rate}{The rate with which to perform the function on each element. Must be a number between 3 and 10 which will translate in a rate of '1 / api_rate' seconds.}

\item{fun}{The function to run on each element of the list/vector at the 'elements' parameter.}

\item{message}{the message to print with the progress bar.}

\item{seed}{due to the functioning of the bold package, this allows to ignore random number generation warnings by the future package. Keep to FALSE (default of future::future function) for all other cases}
}
\value{
The result of the function provided with the fun parameter.
}
\description{
This function allows to run another function as a future (future::future()) object. If the current future plan is "sequential" (as in every 'normal' condition of NON-parallelization), each element of the list/vector at the elements parameter.
If, on the other hand, the future plan has been previously set to "multisession", then the function applied to each element will be sent in background as a future object stored in a list, allowing to apply the function to multiple elements each 1 / api_rate seconds. When all elements have been processed with the fun, then future::value will extract the results and return them as a list.
This allows each user to adopt the wanted future plan, eventually allowing to speed up the analyses with a dynamic parallelization that respects the http requests limit imposed by the NCBI.
This function also implements the other function connection_handler which allows to repeat the function if there is a connection error.
}
\examples{
\dontrun{
ids <- c("Polymastia invaginata", "Aglaophamus trissophyllus", "Hastingsia gracilis")

ncbi_limit_handler(ids, api_rate = 3, function(id){
ncbi_searcher(id, "taxonomy")
})
}
}
\keyword{internal}
