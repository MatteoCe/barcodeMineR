[{"path":"https://matteoce.github.io/barcodeMineR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 barcodeMineR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/articles/api_rate_barcodeMineR.html","id":"api-rate-limit","dir":"Articles","previous_headings":"","what":"API rate limit","title":"Speeding up the recovery of DNA barcodes","text":"NCBI servers allows three requests per second single user. limit respected, NCBI block requests time. request takes less 1/3 second finish, represents maximum rate can adopted analyses. example, vector 50 species, can expect theoretical execution time get_ncbi_taxonomy function 16.67 seconds: However, rendering vignettes, executed 41 seconds. API rate value, default ncbi functions barcodeMineR package, , however, highly subjected changes speed internet connections, might delay requests certain times, leading accumulation four requests window one second time. order avoid , higher download rate can adopted user decides register NCBI account. Using API key, user can send 10 requests per second NCBI. can done “externally”, respect barcodeMineR functions, following rentrez documentation, specifically function: setting NCBI account, user assures requests don’t take much time can executed even faster, avoid excessive blocking internet connection particularly unreliable. Including NCBI API key approximately halves execution time get_ncbi_taxonomy, querying multiple species . get_ncbi_taxonomy command previously executed takes 19 seconds run API_key. ncbi functions barcodeMineR package benefit inclusion API key, increases speed fast requests reliability long execution times.","code":"library(barcodeMineR)  # extract example dataset with 200 species from the Ross Sea (Antarctica, Southern Ocean) specs <- barcodeMineR::species200  tax <- get_ncbi_taxonomy(specs[1:50], ask = FALSE) set_entrez_key(\"ABCD123\")"},{"path":"https://matteoce.github.io/barcodeMineR/articles/api_rate_barcodeMineR.html","id":"adopting-an-asynchronous-framework","dir":"Articles","previous_headings":"","what":"Adopting an asynchronous framework","title":"Speeding up the recovery of DNA barcodes","text":"One main advantages barcodeMineR package consists capacity adopt asynchronous parallelizing framework future package speed download records NCBI repository. execution time download_ncbi function depends many records correspond single species/taxa NCBI nucleotide database. example, wanted search records corresponding Antarctic krill species Euphausia superba, expect download 1584 records, execution time approximately 2.27 minutes, function download_ncbi. context, asynchronous parallelizing framework future package comes handy. synthesis, request sent background process, block current R session send another request specified time, provided enough “workers” (cores) available send another request. means , using future framework, can send request every 1/3 second (1/10, set NCBI API key), independently completion previous request. can setup future framework using functions. , ’re setting “multisession” plan using available cores machine: can specify number cores using workers argument, check many cores available using following command: can revert “normal”, sequential framework ’re done work using barcodeMineR package, supplying “sequential” command. Remember proceeding , unrelated work, case ’re interested using asynchronous framework. ’re unsure plan current R session set , use command without arguments. plan (“multisession”) works OSes, Rstudio command line. significantly speed recovery records NCBI, especially download_ncbi function, can also improve speed get_ncbi_taxonomy (see section details). However, must kept mind using multiple cores comes “computational price”, meaning result efficient searching species significant amount records NCBI (searching species ). See tips end vignette details. Now, entire process downloading Euphausia superba records take sensibly less time “sequential” future plan, providing final results 1.08 minutes, executed 8 cores “multisession”.","code":"tax <- get_ncbi_taxonomy(\"Euphausia superba\")  # the execution time refers to the function below only recs <- download_ncbi(tax, ask = FALSE) future::plan(\"multisession\") future::availableCores() #> system  #>      4"},{"path":"https://matteoce.github.io/barcodeMineR/articles/api_rate_barcodeMineR.html","id":"why-cant-i-speed-up-the-bold-functions","dir":"Articles","previous_headings":"","what":"Why can’t I speed up the BOLD functions?","title":"Speeding up the recovery of DNA barcodes","text":"BOLD servers maintenance support API rate limit, like NCBI , , reason, certain number requests sent particular window time may result temporary blocking BOLD servers. factors mostly influence occurrence inconvenience two: Number requests: get_bold_taxonomy download_bold functions default settings try avoid sending many requests time. example, default api_rate argument setting get_bold_taxonomy allows search specific taxon every 1/0.06 seconds, meaning maximum number requests set 250 per hour. Although can considered pretty low, comes recent testing (May 2024) detected frequent blocking querying BOLD taxonomy database surpassing limit. applies taxa include children, thus species. searching higher level taxa leaving descend argument TRUE (default), relying usage package taxize, limit might easily surpassed many children taxa present. Size requested data: Differently get_bold_taxonomy function, download_bold function higher limit, mostly depends amount data requested time. querying long list species names, function set send request every second, without frequent blocking. However, depends amount data correspond taxon. , example, search Arthropoda sequences BOLD, although get_bold_taxonomy function run smoothly, provided descend argument set FALSE, download_bold surely fail, resulting temporary blocking BOLD servers. using download_bold, search low level taxonomies (downward family), suggested bold package.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/articles/api_rate_barcodeMineR.html","id":"tuning-the-functions-arguments","dir":"Articles","previous_headings":"","what":"Tuning the functions’ arguments","title":"Speeding up the recovery of DNA barcodes","text":"Different arguments can tuned improve speed /reliability requests NCBI servers. include rate xml fasta downloads API rate: api_rate argument allows override default settings NCBI requests rate. future plan framework allows send requests every 1 / api_rate seconds, thus ensuring ‘api_rate’ requests sent window framework 1 second. However, due fluctuations internet connection, still api_rate number requests might arrive NCBI servers, causing errors. function can handle 5 consecutive errors per request, many errors might block whole process. api_rate parameter can modified order slow requests sent per second. overrides automatic selection optimal parameter (either 3 10) accepts one decimal degree number 1.0 10.0, internet connection particularly bad, can set 2.5 2.0, example, order slow number requests per second reduce possibility errors. rate argument get_ncbi_taxonomy download_bold arguments rate_xml rate_fasta download_ncbi function allow set number taxa/species queried request impacts memory usage package. Although decreasing increasing value significantly impact speed, worth mentioning , case low memory availability, reducing amount xml fasta sequences downloaded time may improve performance. Nonetheless, better keep values default settings, tested different settings.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/articles/api_rate_barcodeMineR.html","id":"tips","dir":"Articles","previous_headings":"Tuning the functions’ arguments","what":"Tips","title":"Speeding up the recovery of DNA barcodes","text":"Progress bar downloading large numbers records BOLD NCBI databases, suggested include progress bar. , ’re relying another beautiful package, progressr package. future package, don’t need supply specific arguments barcodeMineR functions activate , can “externally”: Now, progress bar appear downloading records, different messages occasionally printed inform user current status operation. progress bar can modified, according user’s preferences, reported progressr documentation. Multisession get_ncbi_taxonomy: Adopting future asynchronous framework can significantly improve execution download_ncbi function, can also improve speed get_ncbi_taxonomy, “multisession” plan set two four workers (cores). fact, setting “future”, background process, takes future package time, , requests take much time suggested include many workers “multisession” plan, significantly improve speed. , execution time function get_ncbi_taxonomy, different future plans shown, revealing improvement observed including NCBI API key:  Multisession download_ncbi: Using asynchronous framework download_ncbi function significantly improves speed, however, true searches recover significant amount records. plot , searching approximately 10 slightly species NCBI nucleotide database, using asynchronous framework improve speed, contrary, slows process. However, gain speed becomes evident downloading records corresponding 50 species. Moreover, important mention , using API key download_ncbi function significantly improves speed mode much multisession plan . However, suggested include key, possible, reduces risks blocking slightly improves speed.","code":"progressr::handlers(global=TRUE) progressr::handlers(\"progress\")"},{"path":"https://matteoce.github.io/barcodeMineR/articles/intro_barcodeMineR.html","id":"merging-data-from-different-repositories","dir":"Articles","previous_headings":"","what":"Merging data from different repositories","title":"Introduction to the barcodeMineR package","text":"can now merge refdb data frames obtain single one. default behaviour next function check records mined repository return original record. needed, behaviour can switched setting argument resolve.conflicts FALSE: can see printed messages, records actually mined versions records obtained repository. removed checking original version downloaded opposite repository. , now DNA barcodes available major online repositories species Dissostichus mawsoni. case want add additional, private sequences mined results, can use function loadBarcodeOre specify either paths tsv file fasta file including new sequences, data frame DNAStringSet object , output refdb data frame formatted merged earlier. order , tsv file must include fields (.e. column names) included example dataset object example_record. can merge records ones mined online examine results:","code":"total <- mergeBarcodeOres(rec_NCBI, rec_BOLD) ## '5' records from BOLD were mined from the NCBI. ## If they are already represented by the NCBI barcodeOre they will be removed to avoid duplicates. ## '3' records from NCBI were mined from BOLD. ## If they are already represented by the BOLD barcodeOre they will be removed to avoid duplicates. ## Duplicated records obtained from the BOLD will be kept. total ## # A tibble: 203 × 30 ##    recordID   markerCode DNA_seq  phylum class order family genus species source ##    <chr>      <chr>      <DNA>    <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  ##  1 ON000293.1 COX1       GCGCCTG… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  2 MK843765.1 COI        TCTCTAC… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  3 DQ498816.1 Cytb       GCCACCC… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  4 DQ498794.1 Rhod       GCCTACA… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  5 MK500763.1 enc1       TCTGACG… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  6 MG729451.1 COI        GAACTTA… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  7 KY656477.1 COI        GCCGGAA… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  8 LC138011.1 ND1        ATGCTTT… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  9 LC138011.1 ND2        ATGAGCC… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ## 10 LC138011.1 COI        GTGGCCA… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ## # ℹ 193 more rows ## # ℹ 20 more variables: lat <dbl>, lon <dbl>, lengthGene <int>, sampleID <chr>, ## #   QueryName <chr>, identified_by <chr>, taxNotes <lgl>, db_xref <chr>, ## #   sourceID <chr>, NCBI_ID <chr>, institutionStoring <chr>, ## #   collected_by <chr>, collection_date <chr>, altitude <int>, depth <int>, ## #   country <chr>, directionPrimers <chr>, lengthSource <int>, ## #   PCR_primers <chr>, note <chr> # load example datasets from barcodeMineR... rec <- barcodeMineR::example_record seq <- barcodeMineR::example_sequence  #... or include the path to your files rec <- \"~/home/my/path/data.tsv\" seq <- \"~/home/my/path/data.fasta\"  new_records <- loadBarcodeOre(rec, seq) new_records ## # A tibble: 1 × 30 ##   recordID markerCode DNA_seq     phylum class order family genus species source ##   <chr>    <chr>      <DNA>       <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  ## 1 SEQ_01   COI        AAACTCAAAG… Chord… Acti… Perc… Notot… Diss… Dissos… ACRON… ## # ℹ 20 more variables: lat <dbl>, lon <dbl>, lengthGene <int>, sampleID <chr>, ## #   QueryName <chr>, identified_by <chr>, taxNotes <chr>, db_xref <chr>, ## #   sourceID <chr>, NCBI_ID <chr>, institutionStoring <chr>, ## #   collected_by <chr>, collection_date <chr>, altitude <chr>, depth <dbl>, ## #   country <chr>, directionPrimers <chr>, lengthSource <int>, ## #   PCR_primers <chr>, note <chr> total <- mergeBarcodeOres(total, new_records) ## No records were obtained from both the NCBI and BOLD total ## # A tibble: 204 × 30 ##    recordID   markerCode DNA_seq  phylum class order family genus species source ##    <chr>      <chr>      <DNA>    <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  ##  1 ON000293.1 COX1       GCGCCTG… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  2 MK843765.1 COI        TCTCTAC… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  3 DQ498816.1 Cytb       GCCACCC… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  4 DQ498794.1 Rhod       GCCTACA… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  5 MK500763.1 enc1       TCTGACG… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  6 MG729451.1 COI        GAACTTA… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  7 KY656477.1 COI        GCCGGAA… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  8 LC138011.1 ND1        ATGCTTT… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ##  9 LC138011.1 ND2        ATGAGCC… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ## 10 LC138011.1 COI        GTGGCCA… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   ## # ℹ 194 more rows ## # ℹ 20 more variables: lat <dbl>, lon <dbl>, lengthGene <int>, sampleID <chr>, ## #   QueryName <chr>, identified_by <chr>, taxNotes <chr>, db_xref <chr>, ## #   sourceID <chr>, NCBI_ID <chr>, institutionStoring <chr>, ## #   collected_by <chr>, collection_date <chr>, altitude <chr>, depth <dbl>, ## #   country <chr>, directionPrimers <chr>, lengthSource <int>, ## #   PCR_primers <chr>, note <chr>"},{"path":"https://matteoce.github.io/barcodeMineR/articles/intro_barcodeMineR.html","id":"analyzing-the-database","dir":"Articles","previous_headings":"","what":"Analyzing the database","title":"Introduction to the barcodeMineR package","text":"pre-formatted refdb data frame allows use functions package, including filtering operations, quality checks, examination taxonomic conflicts plotting functions. example, search taxonomic conflicts, use appropriate function refdb package: observed output, appears nomenclature ray-finned fishes different BOLD NCBI taxonomies (Actinopteri vs Actinopterygii). can also filter records based length sequences. Although retain information lengthGene field, refdb package directly calculates using refdb_filter_seq_length function. Let’s say want know many records correspond maximum 658 base pairs (bp) length: total 99 records include sequences 658 bp length. However, many records results much shorter length:  fact, many records extracted complete mitochondrial genomes, can readily inspected using one plotting functions barcodeMineR package:  shown, original length fasta sequence records much longer final result obtained barcodeMineR package. much information retrieved record, can see many records include primers used amplify sequence another plotting function barcodeMineR package, credit Gwiazdowski et al. (2015):  can also map records available geographical coordinates using refdb package: records geographical coordinates final merged table. basic usage barcodeMineR package. Now can check speed recovery records NCBI database reading vignette.","code":"library(refdb)  refdb_check_tax_conflict(total) ## $phylum ## # A tibble: 0 × 2 ## # ℹ 2 variables: Taxon <chr>, Taxonomy <???> ##  ## $class ## # A tibble: 0 × 2 ## # ℹ 2 variables: Taxon <chr>, Taxonomy <???> ##  ## $order ## # A tibble: 2 × 2 ##   Taxon       Taxonomy                  ##   <chr>       <chr>                     ## 1 Perciformes Chordata > Actinopteri    ## 2 Perciformes Chordata > Actinopterygii ##  ## $family ## # A tibble: 2 × 2 ##   Taxon         Taxonomy                                ##   <chr>         <chr>                                   ## 1 Nototheniidae Chordata > Actinopteri > Perciformes    ## 2 Nototheniidae Chordata > Actinopterygii > Perciformes ##  ## $genus ## # A tibble: 2 × 2 ##   Taxon        Taxonomy                                                ##   <chr>        <chr>                                                   ## 1 Dissostichus Chordata > Actinopteri > Perciformes > Nototheniidae    ## 2 Dissostichus Chordata > Actinopterygii > Perciformes > Nototheniidae ##  ## $species ## # A tibble: 2 × 2 ##   Taxon                Taxonomy                                                  ##   <chr>                <chr>                                                     ## 1 Dissostichus mawsoni Chordata > Actinopteri > Perciformes > Nototheniidae > D… ## 2 Dissostichus mawsoni Chordata > Actinopterygii > Perciformes > Nototheniidae … total_filt <- refdb_filter_seq_length(total, max_len = 658) refdb_plot_seqlen_hist(total_filt) plot_length(total_filt) plot_primers(total_filt) refdb_plot_map(total)"},{"path":"https://matteoce.github.io/barcodeMineR/articles/taxonomy_barcodeMineR.html","id":"how-do-the-taxonomy-functions-work","dir":"Articles","previous_headings":"","what":"How do the taxonomy functions work","title":"Searching taxonomy","text":"taxonomy functions used define exactly records retrieved download functions. precisely, records include taxid/scientificName, retrieved using taxonomy functions, lowest taxonomic identification, downloaded. Although basic usage two functions get_ncbi_taxonomy get_bold_taxonomy similar, slightly differ comes downloading unclassified records. , can find thorough explanation two functions’ usage.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/articles/taxonomy_barcodeMineR.html","id":"ncbi-taxonomy","dir":"Articles","previous_headings":"How do the taxonomy functions work","what":"NCBI taxonomy","title":"Searching taxonomy","text":"example, following object, obtained using get_ncbi_taxonomy function, retrieve NCBI records corresponding species Maldane sarsi, excluding records identified subspecies: However, case interested records identified Maldane sarsi, including children taxonomy, need include species subspecies taxonomy data frame. done default, searching species, ask argument set FALSE: Otherwise, function prompt user choose taxonomic rank include final output. Running download_ncbi function search records Maldane sarsi Maldane sarsi antarctica lowest taxonomic identification. applies taxonomic levels. example, imagine ’re interested Maldane sarsi records NCBI. order gather much sequences possible, might also include records identified genus level, case include highly similar sequences use analyses. , search “unclassified Maldane” retain species subspecies: merge two taxonomic tables thus search records corresponding Maldane sarsi, Maldane sarsi antarctica plus Maldane sp. 1 GK-2017 Maldane sp. 2 GK-2017 Maldane sp. CBCA-2009: order sure include Maldane sarsi records, simply search genus Maldane actively select species/subspecies ’re interested . case, base function grep might come handy: merging data frame one including unclassified Maldane can confident download available Maldane sarsi records NCBI:","code":"tax_maldane #>       queryName  taxid    rank scientificName   phylum      class order #> 1 Maldane sarsi 273041 species  Maldane sarsi Annelida Polychaeta    NA #>       family   genus       species #> 1 Maldanidae Maldane Maldane sarsi maldane_rec <- download_ncbi(tax_maldane, ask = FALSE)  nrow(maldane_rec) #> [1] 9 tax_maldane <- get_ncbi_taxonomy(\"Maldane sarsi\", ask = FALSE)  # the taxonomy table now includes both species and subspecies: tax_maldane #>       queryName   taxid       rank           scientificName   phylum      class #> 1 Maldane sarsi 1931189 subspecies Maldane sarsi antarctica Annelida Polychaeta #> 2 Maldane sarsi  273041    species            Maldane sarsi Annelida Polychaeta #>   order     family   genus       species #> 1    NA Maldanidae Maldane Maldane sarsi #> 2    NA Maldanidae Maldane Maldane sarsi maldane_rec <- download_ncbi(tax_maldane, ask = FALSE)  # the output now include two more records nrow(maldane_rec) #> [1] 11 additional_tax <- get_ncbi_taxonomy(\"unclassified Maldane\") # after selecting only the ranks \"species\" and \"subspecies\" this is the final  # output: additional_tax #>              queryName   taxid    rank        scientificName   phylum #> 1 unclassified Maldane 2066661 species Maldane sp. 1 GK-2017 Annelida #> 2 unclassified Maldane 2066650 species Maldane sp. 2 GK-2017 Annelida #> 3 unclassified Maldane  649691 species Maldane sp. CBCA-2009 Annelida #>        class order     family   genus               species #> 1 Polychaeta    NA Maldanidae Maldane Maldane sp. 1 GK-2017 #> 2 Polychaeta    NA Maldanidae Maldane Maldane sp. 2 GK-2017 #> 3 Polychaeta    NA Maldanidae Maldane Maldane sp. CBCA-2009 final_tax <- rbind(tax_maldane, additional_tax)  download_ncbi(final_tax, ask = FALSE) #> # A tibble: 19 × 30 #>    recordID   markerCode  DNA_seq phylum class order family genus species source #>    <chr>      <chr>       <DNA>   <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  #>  1 OQ053050.1 COX1        AACCTT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  2 LC342665.1 COX1        AACACT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  3 LC342640.1 COX1        AACATT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  4 MG421523.1 COI         AACATT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  5 GQ229112.1 COI         TTGTGG… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  6 OQ071313.1 large subu… GAGGGA… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  7 OQ071256.1 small subu… CCTTCG… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  8 LC366965.1 18S riboso… TAGTCA… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  9 LC366940.1 18S riboso… TAGTCA… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> 10 LC366001.1 28S riboso… ACTTGG… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> 11 LC365980.1 28S riboso… CCCCAG… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> 12 LC365952.1 16S riboso… AGCTTC… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> 13 KX867346.1 16S riboso… GTATCC… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> 14 KX867345.1 16S riboso… TATCCT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> 15 AY612628.1 28S riboso… CCAACT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> 16 AY612617.1 18S riboso… TATCTT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> 17 AY569681.1 16S riboso… CGCGGT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> 18 AY569669.1 28S riboso… TGTGCG… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> 19 AY569655.1 18S riboso… TGCCAG… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> # ℹ 20 more variables: lat <dbl>, lon <dbl>, lengthGene <int>, sampleID <chr>, #> #   QueryName <chr>, identified_by <chr>, taxNotes <lgl>, db_xref <chr>, #> #   sourceID <chr>, NCBI_ID <chr>, institutionStoring <lgl>, #> #   collected_by <chr>, collection_date <chr>, altitude <lgl>, depth <lgl>, #> #   country <lgl>, directionPrimers <lgl>, lengthSource <int>, #> #   PCR_primers <lgl>, note <lgl> tax_maldane <- get_ncbi_taxonomy(\"Maldane\", ask = FALSE)  # actively filter all records including the strings \"Maldane\" and \"sarsi\" in the # field \"scientificName\" tax_maldane_all <- tax_maldane[grep(\"(Maldane).*(sarsi)\", tax_maldane$scientificName), ]  tax_maldane_all #>    queryName   taxid       rank            scientificName   phylum      class #> 6    Maldane 2066649    species Maldane cf. sarsi GK-2017 Annelida Polychaeta #> 7    Maldane 1931189 subspecies  Maldane sarsi antarctica Annelida Polychaeta #> 9    Maldane  880914    species       Maldane sarsi CMC02 Annelida Polychaeta #> 10   Maldane  879538    species       Maldane sarsi CMC01 Annelida Polychaeta #> 12   Maldane  273041    species             Maldane sarsi Annelida Polychaeta #>    order     family   genus                   species #> 6     NA Maldanidae Maldane Maldane cf. sarsi GK-2017 #> 7     NA Maldanidae Maldane             Maldane sarsi #> 9     NA Maldanidae Maldane       Maldane sarsi CMC02 #> 10    NA Maldanidae Maldane       Maldane sarsi CMC01 #> 12    NA Maldanidae Maldane             Maldane sarsi all_maldane <- rbind(tax_maldane_all, additional_tax)  ncbi_maldane <- download_ncbi(all_maldane, ask = FALSE) ncbi_maldane #> # A tibble: 29 × 30 #>    recordID   markerCode DNA_seq  phylum class order family genus species source #>    <chr>      <chr>      <DNA>    <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  #>  1 OQ053050.1 COX1       AACCTTA… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  2 LC342665.1 COX1       AACACTA… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  3 LC342640.1 COX1       AACATTA… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  4 LC342639.1 COX1       AACATTA… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  5 MG421523.1 COI        AACATTA… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  6 HQ023885.1 COI        AACATTA… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  7 GQ229112.1 COI        TTGTGGT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  8 GU672597.1 COI        GGAACAT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  9 GU672596.1 COI        GGAACAT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> 10 GU672576.1 COI        GGAACAT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> # ℹ 19 more rows #> # ℹ 20 more variables: lat <dbl>, lon <dbl>, lengthGene <int>, sampleID <chr>, #> #   QueryName <chr>, identified_by <chr>, taxNotes <lgl>, db_xref <chr>, #> #   sourceID <chr>, NCBI_ID <chr>, institutionStoring <lgl>, #> #   collected_by <chr>, collection_date <chr>, altitude <lgl>, depth <lgl>, #> #   country <lgl>, directionPrimers <lgl>, lengthSource <int>, #> #   PCR_primers <lgl>, note <lgl>"},{"path":"https://matteoce.github.io/barcodeMineR/articles/taxonomy_barcodeMineR.html","id":"bold-taxonomy","dir":"Articles","previous_headings":"How do the taxonomy functions work","what":"BOLD taxonomy","title":"Searching taxonomy","text":"basic usage get_bold_taxonomy follows mechanism. order obtain Clione antarctica records, first need get corresponding taxonomy data frame: However, exclude descending taxonomic levels, case subspecies Clione antarctica. function get_bold_taxonomy automatically searches downstream taxonomies, thanks default setting descend argument. However, can overridden setting argument FALSE. descend argument introduced allow user avoid internal children taxa searching method implementing package taxize, may result unstable searching long vectors. See Tips section vignette information matter. main difference NCBI taxonomy function get_bold_taxonomy actually relates subsequent recovery records. fact, BOLD database include “unclassified taxon” rank includes records identified taxonomic level, species name. However, publication records BOLD database require necessarily identification species level, meaning searching higher level taxonomies result download records identified taxon . increase recovery records potentially related Clione antarctica, can also search genus Clione download records identified genus level: 8 records identified genus Clione, thus, wanted recover records potentially belonging Clione antarctica species search unidentified Clione records together identified Clione antarctica. Ideally, simplest approach: section, searching taxa Clione filtering including strings “Clione” “antarctica” using grep increase chances include records identification qualifiers like “cf.”.","code":"# this taxonomy table will retrieve all \"Clione antarctica\" records  tax_clione #>           queryName  taxid             taxon    rank records #> 1 Clione antarctica 650223 Clione antarctica species       9 rec_clione <- download_bold(tax_clione, ask = FALSE) nrow(rec_clione) #> [1] 9 tax_clione_anta <- get_bold_taxonomy(\"Clione antarctica\", descend = TRUE)  rec_clione <- download_bold(tax_clione_anta, ask = FALSE) nrow(rec_clione) #> [1] 9 tax_clione <- get_bold_taxonomy(\"Clione\", descend = FALSE)  rec_clione <- download_bold(tax_clione, ask = FALSE) rec_clione #> # A tibble: 8 × 30 #>   recordID    markerCode DNA_seq  phylum class order family genus species source #>   <chr>       <chr>      <DNA>    <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  #> 1 QHAK1223-22 COI-5P     ACAAGGA… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #> 2 BHAK2663-20 COI-5P     GACTCTT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #> 3 QHAK1237-22 COI-5P     GACTCTT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #> 4 QHAK1263-22 COI-5P     GACTCTT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #> 5 QHAK1267-22 COI-5P     GACTCTT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #> 6 QHAK1446-22 COI-5P     GACTCTT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #> 7 QHAK1466-22 COI-5P     GACTCTT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #> 8 QHAK3063-23 COI-5P     GACTCTT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #> # ℹ 20 more variables: lat <dbl>, lon <dbl>, lengthGene <int>, sampleID <chr>, #> #   QueryName <chr>, identified_by <chr>, taxNotes <lgl>, db_xref <chr>, #> #   sourceID <chr>, NCBI_ID <chr>, institutionStoring <chr>, #> #   collected_by <chr>, collection_date <lgl>, altitude <int>, depth <dbl>, #> #   country <chr>, directionPrimers <chr>, lengthSource <int>, #> #   PCR_primers <chr>, note <lgl> final_tax <- get_bold_taxonomy(c(\"Clione\", \"Clione antarctica\"), descend = FALSE, ask = FALSE)  rec_clione <- download_bold(final_tax, ask = FALSE) rec_clione #> # A tibble: 17 × 30 #>    recordID    markerCode DNA_seq phylum class order family genus species source #>    <chr>       <chr>      <DNA>   <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  #>  1 QHAK1223-22 COI-5P     ACAAGG… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #>  2 BHAK2663-20 COI-5P     GACTCT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #>  3 QHAK1237-22 COI-5P     GACTCT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #>  4 QHAK1263-22 COI-5P     GACTCT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #>  5 QHAK1267-22 COI-5P     GACTCT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #>  6 QHAK1446-22 COI-5P     GACTCT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #>  7 QHAK1466-22 COI-5P     GACTCT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #>  8 QHAK3063-23 COI-5P     GACTCT… Mollu… Gast… Pter… Clion… Clio… NA      BOLD   #>  9 CAOII309-09 COI-5P     ------… Mollu… Gast… Pter… Clion… Clio… Clione… BOLD   #> 10 CMARA044-09 COI-5P     ------… Mollu… Gast… Pter… Clion… Clio… Clione… BOLD   #> 11 GBMLG18681… COI-5P     GTAGGC… Mollu… Gast… Pter… Clion… Clio… Clione… BOLD   #> 12 GBMLG18683… COI-5P     GTAGGC… Mollu… Gast… Pter… Clion… Clio… Clione… BOLD   #> 13 CAOII308-09 COI-5P     ------… Mollu… Gast… Pter… Clion… Clio… Clione… BOLD   #> 14 CAOII310-09 COI-5P     ------… Mollu… Gast… Pter… Clion… Clio… Clione… BOLD   #> 15 CAOII311-09 COI-5P     ------… Mollu… Gast… Pter… Clion… Clio… Clione… BOLD   #> 16 GBMLG17117… COI-5P     TTGTTT… Mollu… Gast… Pter… Clion… Clio… Clione… BOLD   #> 17 GBMLG18682… COI-5P     GTAGGC… Mollu… Gast… Pter… Clion… Clio… Clione… BOLD   #> # ℹ 20 more variables: lat <dbl>, lon <dbl>, lengthGene <int>, sampleID <chr>, #> #   QueryName <chr>, identified_by <chr>, taxNotes <lgl>, db_xref <chr>, #> #   sourceID <chr>, NCBI_ID <chr>, institutionStoring <chr>, #> #   collected_by <chr>, collection_date <lgl>, altitude <int>, depth <dbl>, #> #   country <chr>, directionPrimers <chr>, lengthSource <int>, #> #   PCR_primers <chr>, note <chr>"},{"path":"https://matteoce.github.io/barcodeMineR/articles/taxonomy_barcodeMineR.html","id":"tips","dir":"Articles","previous_headings":"How do the taxonomy functions work > BOLD taxonomy","what":"Tips","title":"Searching taxonomy","text":"Searching long vectors careful searching long vectors including many different taxa. might result frequent blocking BOLD servers, explained vignette topic can’t speed BOLD functions?. However, number taxa searched remains approximate limit 250 per hour, mining operations using BOLD functions package can sped setting api_rate argument 1 (thus 1 request per second). Overriding default taxonomy filter download_bold user interested records belonging many higher level taxa (genera, families orders), using get_bold_taxonomy function may take lot time search descending taxonomic names. low rate bold functions set mainly due frequent blocking BOLD serves, described can’t speed BOLD functions?. One solution consists deactivating default filtering step adopted download_bold function, eliminates records belonging children taxonomies present taxonomy table provided, .e. output previous get_bold_taxonomy. can achieved setting argument filter FALSE:","code":"# get taxonomic table of the genus Clione tax <- get_bold_taxonomy(\"Clione\", descend = FALSE, ask = FALSE)  # download all records, including those identified to species belonging to Clione download_bold(tax, filter = FALSE)"},{"path":"https://matteoce.github.io/barcodeMineR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matteo Cecchetto. Author, maintainer.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cecchetto M (2024). barcodeMineR: Fast reliable mining DNA Barcodes NCBI BOLD. R package version 0.1.0, https://matteoce.github.io/barcodeMineR/, https://github.com/MatteoCe/barcodeMineR.","code":"@Manual{,   title = {barcodeMineR: Fast and reliable mining of DNA Barcodes from the NCBI and BOLD},   author = {Matteo Cecchetto},   year = {2024},   note = {R package version 0.1.0, https://matteoce.github.io/barcodeMineR/},   url = {https://github.com/MatteoCe/barcodeMineR}, }"},{"path":[]},{"path":"https://matteoce.github.io/barcodeMineR/index.html","id":"the-barcodeminer-package","dir":"","previous_headings":"","what":"The barcodeMineR package","title":"Fast and reliable mining of DNA Barcodes from the NCBI and BOLD","text":"package allows query multiple taxonomic names NCBI BOLD repositories retrieve DNA barcodes associated metadata wanted marker. heavily relies bold rentrez packages rOpenSci, takes advantage asynchronous framework future package speed retrieval data NCBI, respecting API requests rate limit. final output data frame object modified following formatting requirements refdb package, cleaned mining duplicates, differences formats BOLD NCBI metadata (e.g. geographic coordinates, dates) commonly occurring issues derive downloading merging data two repositories. synthesis, provides unified framework mining DNA Barcodes main online genomic repositories, providing clean, metadata-rich sequences programmatic way interactively, depending wanted usage.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast and reliable mining of DNA Barcodes from the NCBI and BOLD","text":"package still development, can install version barcodeMineR, directly GitHub repository, using Bioconductor package:","code":"BiocManager::install(\"MatteoCe/barcodeMineR\")"},{"path":"https://matteoce.github.io/barcodeMineR/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Fast and reliable mining of DNA Barcodes from the NCBI and BOLD","text":"basic functioning package includes two steps, must run consequently: Take look introductory vignette complete tutorial! , proceed ‘Speeding ’ vignette learn increase speed reliability package functions.","code":"library(barcodeMineR)  # check if a species is on the NCBI nucleotide database: tax <- get_ncbi_taxonomy(\"Dissostichus mawsoni\")  # download all records of this species from the database: rec <- download_ncbi(tax, ask = FALSE)  # display output: rec #> # A tibble: 189 × 30 #>    recordID   markerCode DNA_seq  phylum class order family genus species source #>    <chr>      <chr>      <DNA>    <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  #>  1 HM422302.1 COI        CTCTACT… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   #>  2 ON000293.1 COX1       GCGCCTG… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   #>  3 MK843765.1 COI        TCTCTAC… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   #>  4 DQ498816.1 Cytb       GCCACCC… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   #>  5 DQ498794.1 Rhod       GCCTACA… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   #>  6 MK500763.1 enc1       TCTGACG… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   #>  7 MG729451.1 COI        GAACTTA… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   #>  8 KY656477.1 COI        GCCGGAA… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   #>  9 LC138011.1 ND1        ATGCTTT… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   #> 10 LC138011.1 ND2        ATGAGCC… Chord… Acti… Perc… Notot… Diss… Dissos… NCBI   #> # ℹ 179 more rows #> # ℹ 20 more variables: lat <dbl>, lon <dbl>, lengthGene <int>, sampleID <chr>, #> #   QueryName <chr>, identified_by <chr>, taxNotes <lgl>, db_xref <chr>, #> #   sourceID <chr>, NCBI_ID <chr>, institutionStoring <lgl>, #> #   collected_by <chr>, collection_date <chr>, altitude <lgl>, depth <lgl>, #> #   country <chr>, directionPrimers <chr>, lengthSource <int>, #> #   PCR_primers <chr>, note <chr>"},{"path":"https://matteoce.github.io/barcodeMineR/reference/barcodeMineR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"barcodeMineR: Fast and reliable mining of DNA Barcodes from the NCBI and BOLD — barcodeMineR-package","title":"barcodeMineR: Fast and reliable mining of DNA Barcodes from the NCBI and BOLD — barcodeMineR-package","text":"package allows query multiple taxonomic names NCBI BOLD repositories retrieve DNA barcodes associated metadata wanted marker. heavily relies bold rentrez packages rOpenSci, takes advantages parallelizing framework future package speed retrieval data NCBI, respecting API requests limit. final output tibble object modified following formatting requirements refdb package, cleaned mining duplicates, differences formats BOLD NCBI metadata (e.g. geographic coordinates, dates) commonly occurring issues derive downloading data repositories. synthesis, provides unified framework mining DNA Barcodes main repositories, roviding clean, metadata-rich sequences programmatic way interactively, depending wanted usage.","code":""},{"path":[]},{"path":"https://matteoce.github.io/barcodeMineR/reference/barcodeMineR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"barcodeMineR: Fast and reliable mining of DNA Barcodes from the NCBI and BOLD — barcodeMineR-package","text":"Maintainer: Matteo Cecchetto matteocecchetto@gmail.com (ORCID)","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/connection_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeat failing functions and manage errors. — connection_handler","title":"Repeat failing functions and manage errors. — connection_handler","text":"function, although used internally, exported order able called `ncbi_limit_handler` inside future::future function.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/connection_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeat failing functions and manage errors. — connection_handler","text":"","code":"connection_handler(fun, attempts = 5)"},{"path":"https://matteoce.github.io/barcodeMineR/reference/connection_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeat failing functions and manage errors. — connection_handler","text":"fun function supplied ncbi_limit_handler. attempts number times repeat function stopping loop.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/connection_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeat failing functions and manage errors. — connection_handler","text":"result function provided.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/download_bold.html","id":null,"dir":"Reference","previous_headings":"","what":"Download records from BOLD — download_bold","title":"Download records from BOLD — download_bold","text":"function searches BOLD records corresponding species found argument `bold_tax`, .e. output function `get_bold_taxonomy`. thorough explanation function usage capabilities, see 'Introduction barcodeMineR package' vignette: vignette(\"Introduction barcodeMineR package\", package = \"barcodeMineR\")","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/download_bold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download records from BOLD — download_bold","text":"","code":"download_bold(   bold_tax,   rate = 100,   api_rate = NULL,   ask = TRUE,   prefix = NULL,   filter = TRUE )"},{"path":"https://matteoce.github.io/barcodeMineR/reference/download_bold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download records from BOLD — download_bold","text":"bold_tax data.frame, returned get_bold_taxonomy function. rate `integer` number records downloaded time. can lowered unstable internet connections. However, due structure bold package, possible download specific number records species represented `rate` records. function groups species whose sum records inferior rate. Defaults `100`. api_rate `integer` API rate iterate separate request. Must number 3 10 translate rate `1 / api_rate` seconds. ask `logical` function ask user whether filter final output taxonomic ranks. Default `TRUE`. prefix `character` character string used create numbered custom ids record ascending order. prefix compose recordID field final object. Default `NULL`, using internal recordID generator use accession number NCBI records processID BOLD records, avoiding duplicates adding `_1`, `_2` etc. filter `logical` Whether filter records retaining corresponding exactly taxa found taxonomy table `bold_tax` include also corresponding children taxonomies. Default `TRUE`.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/download_bold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download records from BOLD — download_bold","text":"`data.frame` refdb data frame, including DNA sequence   field.","code":""},{"path":[]},{"path":"https://matteoce.github.io/barcodeMineR/reference/download_bold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download records from BOLD — download_bold","text":"","code":"tax <- get_bold_taxonomy(\"Polymastia invaginata\")  download_bold(tax, ask = FALSE) #> # A tibble: 6 × 30 #>   recordID     markerCode DNA_seq phylum class order family genus species source #>   <chr>        <chr>      <DNA>   <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  #> 1 GBMAA106-14  COI-5P     GACTCT… Porif… Demo… Poly… Polym… Poly… Polyma… BOLD   #> 2 GBMAA150-14  COI-5P     GACTCT… Porif… Demo… Poly… Polym… Poly… Polyma… BOLD   #> 3 GBMIN44241-… COI-5P     GACTCT… Porif… Demo… Poly… Polym… Poly… Polyma… BOLD   #> 4 GBMIN44242-… COI-5P     GTATGT… Porif… Demo… Poly… Polym… Poly… Polyma… BOLD   #> 5 GBMIN44243-… COI-5P     GTATGT… Porif… Demo… Poly… Polym… Poly… Polyma… BOLD   #> 6 GBMIN44244-… COI-5P     GTATGT… Porif… Demo… Poly… Polym… Poly… Polyma… BOLD   #> # ℹ 20 more variables: lat <dbl>, lon <dbl>, lengthGene <int>, sampleID <chr>, #> #   QueryName <chr>, identified_by <lgl>, taxNotes <lgl>, db_xref <chr>, #> #   sourceID <chr>, NCBI_ID <chr>, institutionStoring <lgl>, #> #   collected_by <lgl>, collection_date <lgl>, altitude <lgl>, depth <lgl>, #> #   country <chr>, directionPrimers <lgl>, lengthSource <int>, #> #   PCR_primers <lgl>, note <chr>"},{"path":"https://matteoce.github.io/barcodeMineR/reference/download_ncbi.html","id":null,"dir":"Reference","previous_headings":"","what":"Download records from the NCBI — download_ncbi","title":"Download records from the NCBI — download_ncbi","text":"function searches NCBI records corresponding species found argument `ncbi_tax`, .e. output function `get_ncbi_taxonomy`. can also search accession numbers return type object. thorough explanation function usage capabilities, see 'Introduction barcodeMineR package' vignette: vignette(\"Introduction barcodeMineR package\", package = \"barcodeMineR\")","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/download_ncbi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download records from the NCBI — download_ncbi","text":"","code":"download_ncbi(   ncbi_tax = NULL,   ncbi_ids = NULL,   rate_xml = 200,   rate_fasta = 100,   default.filter = TRUE,   filter = NULL,   api_rate = NULL,   ask = TRUE,   prefix = NULL )"},{"path":"https://matteoce.github.io/barcodeMineR/reference/download_ncbi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download records from the NCBI — download_ncbi","text":"ncbi_tax `data.frame` data frame, returned `get_ncbi_taxonomy()` function. ncbi_ids `character` character vector NCBI accession numbers. rate_xml `integer` number xml objects downloaded time. can lowered unstable internet connections. Defaults `200`. rate_fasta `integer` number fasta sequences downloaded time. Many fasta can correspond mitogenomes chromosomes, may lead errors downloaded great numbers. Defaults `100`. default.filter `logical` Whether filter records excluding whole genome shotgun sequences transcribed shotgun assembly. Defaults `TRUE`. filter `character` additional query filter form /multiple string/s add every searched taxid. allow user specifically filter every search custom query. Multiple strings provided form character vector single query filters (see description details). Defaults `NULL`. api_rate `integer` API rate iterate separate request. Must number 3 10 translate rate `1 / api_rate` seconds. ask `logical` function ask user whether filter final output taxonomic ranks. Default `TRUE`. prefix `character` character string used create numbered custom ids record ascending order. prefix compose recordID field final object. Default `NULL`, using internal recordID generator use accession number NCBI records processID BOLD records, avoiding duplicates adding `_1`, `_2` etc.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/download_ncbi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download records from the NCBI — download_ncbi","text":"`data.frame` refdb data frame, including DNA sequence   field.","code":""},{"path":[]},{"path":"https://matteoce.github.io/barcodeMineR/reference/download_ncbi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download records from the NCBI — download_ncbi","text":"","code":"tax <- get_ncbi_taxonomy(\"Polymastia invaginata\")  download_ncbi(tax, ask = FALSE) #> # A tibble: 16 × 30 #>    recordID   markerCode  DNA_seq phylum class order family genus species source #>    <chr>      <chr>       <DNA>   <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  #>  1 HG423800.1 28S rRNA    TAGCCC… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #>  2 HG423799.1 28S rRNA    TAGCCC… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #>  3 HG423770.1 28S rRNA    ACACGG… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #>  4 HG423769.1 28S rRNA    ACACGG… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #>  5 HG423740.1 28S rRNA    TTAAGC… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #>  6 HG423739.1 28S rRNA    TTAAGC… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #>  7 HG423712.1 COI         GACTCT… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #>  8 HG423711.1 COI         GACTCT… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #>  9 LN850239.1 COI         GTATGT… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #> 10 LN850219.1 COI         GTATGT… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #> 11 LN850218.1 COI         GTATGT… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #> 12 LN606560.1 28S rRNA    TAGCCC… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #> 13 LN606530.1 28S rRNA    ACACGG… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #> 14 LN606500.1 28S rRNA    TTAAGC… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #> 15 LN606462.1 COI         GACTCT… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #> 16 AY561922.1 28S large … CGGCCC… Porif… Demo… Poly… Polym… Poly… Polyma… NCBI   #> # ℹ 20 more variables: lat <dbl>, lon <dbl>, lengthGene <int>, sampleID <chr>, #> #   QueryName <chr>, identified_by <lgl>, taxNotes <lgl>, db_xref <chr>, #> #   sourceID <chr>, NCBI_ID <chr>, institutionStoring <lgl>, #> #   collected_by <lgl>, collection_date <chr>, altitude <lgl>, depth <lgl>, #> #   country <lgl>, directionPrimers <lgl>, lengthSource <int>, #> #   PCR_primers <lgl>, note <lgl>"},{"path":"https://matteoce.github.io/barcodeMineR/reference/example_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Example records data frame — example_record","title":"Example records data frame — example_record","text":"example data frame, including meta-data fake sequence used example dataset function loadBarcodeOre vignettes.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/example_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example records data frame — example_record","text":"","code":"example_record"},{"path":"https://matteoce.github.io/barcodeMineR/reference/example_record.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example records data frame — example_record","text":"## `example_record` data frame 1 row 25 columns: sourceID Record code source Acronym/name database/department record/sequence originates phylum, class, order, family, genus, species Taxonomic classification record lengthSource Length sequence, base pairs sampleID Sample code, corresponding specimen sequence originates identified_by, collected_by, taxNotes, collection_date, note Character class additional informations sample's origin db_xref Generally unused user's records, include taxid NCBI record (taxid:\"00001\") separated pipe corresponding BOLD processID NCBI_ID Accession number record NCBI database institutionStoring Acronym/name institution storing sample altitude, depth Elevation data country Name locality sample originates lat, lon Geographical coordinates, decimal degrees directionPrimers Gives type primers shown foeld \"PCR_primers\": \"F|R\" indicates primers' names \"PCR_primers\" separated pipe correspond forward revers primers order PCR_primers Names primers used amplify sequence record note Additional notes","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/example_record.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example records data frame — example_record","text":"generated manually, consult data_raw directory details","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/example_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Example DNAStringSet sequence — example_sequence","title":"Example DNAStringSet sequence — example_sequence","text":"example sequence, corresponding data example_record. Used example dataset function loadBarcodeOre vignettes.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/example_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example DNAStringSet sequence — example_sequence","text":"","code":"example_sequence"},{"path":"https://matteoce.github.io/barcodeMineR/reference/example_sequence.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example DNAStringSet sequence — example_sequence","text":"## `example_sequence` DNAStringSet object (Biostrings) 658 base pairs \"width\". item NAMES includes sourceID markerCode separated pipe.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/example_sequence.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example DNAStringSet sequence — example_sequence","text":"generated manually, consult data_raw directory details","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/get_bold_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get taxonomic classification of the BOLD taxonomy database for a list of taxa — get_bold_taxonomy","title":"Get taxonomic classification of the BOLD taxonomy database for a list of taxa — get_bold_taxonomy","text":"taxonomy functions used define exactly records retrieved download functions. precisely, records include taxid/scientificName, retrieved using taxonomy functions, lowest taxonomic identification downloaded. details see 'Searching taxonomy' vignette: vignette(\"Searching taxonomy\", package = \"barcodeMineR\")","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/get_bold_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get taxonomic classification of the BOLD taxonomy database for a list of taxa — get_bold_taxonomy","text":"","code":"get_bold_taxonomy(ids, api_rate = NULL, ask = TRUE, descend = TRUE)"},{"path":"https://matteoce.github.io/barcodeMineR/reference/get_bold_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get taxonomic classification of the BOLD taxonomy database for a list of taxa — get_bold_taxonomy","text":"ids `character` character string species names. api_rate `integer` API rate iterate separate request. left default `NULL`, set one request every 16 seconds approximately. Use caution overriding default. ask `logical` function ask user whether filter final output taxonomic ranks. Default `TRUE`. descend `logical` Use taxize package retrieve lower level taxonomies. Default `TRUE`.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/get_bold_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get taxonomic classification of the BOLD taxonomy database for a list of taxa — get_bold_taxonomy","text":"`data.frame` data.frame object searched taxa, taxid   rank.","code":""},{"path":[]},{"path":"https://matteoce.github.io/barcodeMineR/reference/get_bold_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get taxonomic classification of the BOLD taxonomy database for a list of taxa — get_bold_taxonomy","text":"","code":"get_bold_taxonomy(\"Achelia assimilis\", descend = FALSE) #>           queryName  taxid             taxon    rank records #> 1 Achelia assimilis 103191 Achelia assimilis species      25"},{"path":"https://matteoce.github.io/barcodeMineR/reference/get_ncbi_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get taxonomic classification of the NCBI taxonomy database for a list of taxa or taxids — get_ncbi_taxonomy","title":"Get taxonomic classification of the NCBI taxonomy database for a list of taxa or taxids — get_ncbi_taxonomy","text":"taxonomy functions used define exactly records retrieved download functions. precisely, records include taxid/scientificName, retrieved using taxonomy functions, lowest taxonomic identification downloaded. details see 'Searching taxonomy' vignette: vignette(\"Searching taxonomy\", package = \"barcodeMineR\")","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/get_ncbi_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get taxonomic classification of the NCBI taxonomy database for a list of taxa or taxids — get_ncbi_taxonomy","text":"","code":"get_ncbi_taxonomy(ids, api_rate = NULL, ask = TRUE)"},{"path":"https://matteoce.github.io/barcodeMineR/reference/get_ncbi_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get taxonomic classification of the NCBI taxonomy database for a list of taxa or taxids — get_ncbi_taxonomy","text":"ids `character` character string species names taxid NCBI. api_rate `integer` API rate iterate separate request. Must number 3 10 translate rate `1 / api_rate` seconds. ask `logical` function ask user whether filter final output taxonomic ranks. Default `TRUE`.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/get_ncbi_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get taxonomic classification of the NCBI taxonomy database for a list of taxa or taxids — get_ncbi_taxonomy","text":"`data.frame` data.frame object searched taxonomic   classification.","code":""},{"path":[]},{"path":"https://matteoce.github.io/barcodeMineR/reference/get_ncbi_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get taxonomic classification of the NCBI taxonomy database for a list of taxa or taxids — get_ncbi_taxonomy","text":"","code":"get_ncbi_taxonomy(\"Polymastia invaginata\") #>               queryName  taxid    rank        scientificName   phylum #> 1 Polymastia invaginata 283554 species Polymastia invaginata Porifera #>          class        order        family      genus               species #> 1 Demospongiae Polymastiida Polymastiidae Polymastia Polymastia invaginata  get_ncbi_taxonomy(\"283554\") #>   queryName  taxid    rank        scientificName   phylum        class #> 1        NA 283554 species Polymastia invaginata Porifera Demospongiae #>          order        family      genus               species #> 1 Polymastiida Polymastiidae Polymastia Polymastia invaginata"},{"path":"https://matteoce.github.io/barcodeMineR/reference/loadBarcodeOre.html","id":null,"dir":"Reference","previous_headings":"","what":"Load sequences and corresponding records as a refdb object — loadBarcodeOre","title":"Load sequences and corresponding records as a refdb object — loadBarcodeOre","text":"function allows user load custom refdb-formatted data frame object additional records sequences obtained private analyses. objects can loaded files (tsv fasta) loaded objects (data.frame DNAStringSet).","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/loadBarcodeOre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load sequences and corresponding records as a refdb object — loadBarcodeOre","text":"","code":"loadBarcodeOre(records, sequences, prefix = NULL)"},{"path":"https://matteoce.github.io/barcodeMineR/reference/loadBarcodeOre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load sequences and corresponding records as a refdb object — loadBarcodeOre","text":"records `data.frame` `character` character string path (file name working directory) leading strictly \"tsv file\" records information. can also correspond data frame, provided fields included example data 'barcodeMineR::example_record'. sequences `DNAStringSet` `character` character string path (file name working directory) leading fasta file sequences corresponding record. can also correspond \"DNAStringSet\" object, one example data `barcodeMineR::example_sequences`. name sequence DNAStringSet object must correspond concatenation fields `sourceID` `markerCode`, separated pipe `|`. prefix `character` character string used create numbered custom ids record ascending order. prefix compose recordID field final object. Default `NULL`, using information extracted field `sourceID`.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/loadBarcodeOre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load sequences and corresponding records as a refdb object — loadBarcodeOre","text":"`data.frame` refdb data frame, including DNA sequence   field.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/loadBarcodeOre.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load sequences and corresponding records as a refdb object — loadBarcodeOre","text":"","code":"if (FALSE) { # \\dontrun{ # load from tsv and fasta files loadBarcodeOre(\"path/to/table.tsv\", \"path/to/sequences.fasta\") } # }  # load from data.frame and DNAStringSet loaded objects loadBarcodeOre(example_record, example_sequence) #> # A tibble: 1 × 30 #>   recordID markerCode DNA_seq     phylum class order family genus species source #>   <chr>    <chr>      <DNA>       <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  #> 1 SEQ_01   COI        AAACTCAAAG… Chord… Acti… Perc… Notot… Diss… Dissos… ACRON… #> # ℹ 20 more variables: lat <dbl>, lon <dbl>, lengthGene <int>, sampleID <chr>, #> #   QueryName <chr>, identified_by <chr>, taxNotes <chr>, db_xref <chr>, #> #   sourceID <chr>, NCBI_ID <chr>, institutionStoring <chr>, #> #   collected_by <chr>, collection_date <chr>, altitude <chr>, depth <dbl>, #> #   country <chr>, directionPrimers <chr>, lengthSource <int>, #> #   PCR_primers <chr>, note <chr>"},{"path":"https://matteoce.github.io/barcodeMineR/reference/mergeBarcodeOres.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge multiple refdb objects to create a single one — mergeBarcodeOres","title":"Merge multiple refdb objects to create a single one — mergeBarcodeOres","text":"function merges output multiple data frames obtained using `download_bold` `download_ncbi` functions private data obtained function `loadBarcodeOre`. resolves conflicts originated internal mining performed online database, result duplicates final object. operation can avoided using argument `resolve.conflicts`.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/mergeBarcodeOres.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge multiple refdb objects to create a single one — mergeBarcodeOres","text":"","code":"mergeBarcodeOres(..., resolve.conflicts = TRUE)"},{"path":"https://matteoce.github.io/barcodeMineR/reference/mergeBarcodeOres.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge multiple refdb objects to create a single one — mergeBarcodeOres","text":"... `data.frame` number refdb-formatted data frames, obtained `download_ncbi`, `download_bold` `loadBarcodeOre`. resolve.conflicts `logical` set FALSE, script merge refdb objects different sources (BOLD, NCBI custom) without quality control steps. Otherwise, searches \"mining duplicates\", records appear sources due internal mining, returns original record. Defaults `TRUE`.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/mergeBarcodeOres.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge multiple refdb objects to create a single one — mergeBarcodeOres","text":"`data.frame` refdb object, including records sequences   refdb objects provided arguments.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/mergeBarcodeOres.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge multiple refdb objects to create a single one — mergeBarcodeOres","text":"","code":"# search and download Maldane sarsi records: tax_ncbi <- get_ncbi_taxonomy(\"Maldane sarsi\", ask = FALSE) tax_bold <- get_bold_taxonomy(\"Maldane sarsi\", ask = FALSE) rec_ncbi <- download_ncbi(tax_ncbi, ask = FALSE) rec_bold <- download_bold(tax_bold, ask = FALSE)  # merge all results into one mergeBarcodeOres(rec_ncbi, rec_bold) #> '1' records from NCBI were mined from BOLD. #> If they are already represented by the BOLD barcodeOre they will be removed to avoid duplicates. #> Duplicated records obtained from the BOLD will be kept. #> # A tibble: 25 × 30 #>    recordID   markerCode  DNA_seq phylum class order family genus species source #>    <chr>      <chr>       <DNA>   <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  #>  1 OQ053050.1 COX1        AACCTT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  2 OQ071313.1 large subu… GAGGGA… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  3 OQ071256.1 small subu… CCTTCG… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  4 KX867346.1 16S riboso… GTATCC… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  5 KX867345.1 16S riboso… TATCCT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  6 AY612628.1 28S riboso… CCAACT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  7 AY612617.1 18S riboso… TATCTT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  8 AY569681.1 16S riboso… CGCGGT… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #>  9 AY569669.1 28S riboso… TGTGCG… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> 10 AY569655.1 18S riboso… TGCCAG… Annel… Poly… NA    Malda… Mald… Maldan… NCBI   #> # ℹ 15 more rows #> # ℹ 20 more variables: lat <dbl>, lon <dbl>, lengthGene <int>, sampleID <chr>, #> #   QueryName <chr>, identified_by <chr>, taxNotes <lgl>, db_xref <chr>, #> #   sourceID <chr>, NCBI_ID <chr>, institutionStoring <chr>, #> #   collected_by <chr>, collection_date <chr>, altitude <int>, depth <dbl>, #> #   country <chr>, directionPrimers <chr>, lengthSource <int>, #> #   PCR_primers <chr>, note <lgl>"},{"path":"https://matteoce.github.io/barcodeMineR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://matteoce.github.io/barcodeMineR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/plot_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the length reduction for the downloaded sequences as a Bar plot — plot_length","title":"Show the length reduction for the downloaded sequences as a Bar plot — plot_length","text":"function plot distribution length (field `lengthGene`) sequences found data frame object provided `refdb` argument, corresponding length original sequence (field `lengthSource`, entire fasta associated reference sequence online database) another \"ridge\", using `ggridges` package.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/plot_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the length reduction for the downloaded sequences as a Bar plot — plot_length","text":"","code":"plot_length(   refdb,   limit = 1000,   breaks = 50,   level = NULL,   select = NULL,   scaling = TRUE )"},{"path":"https://matteoce.github.io/barcodeMineR/reference/plot_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the length reduction for the downloaded sequences as a Bar plot — plot_length","text":"refdb `data.frame` data frame object, recovered `download_ncbi`, `download_bold` `loadBarcodeOre` functions. limit `integer` length bp (base pairs) sequences longer grouped reported last bar x axis. breaks `integer` length range bp x axis. level `character` character vector indicating taxonomic level `facet_wrap` function ggplot2 refer . one \"phylum\", \"class\", \"order\", \"family\" \"genus\". Defaults `NULL`, thus avoiding `facet_wrap`. select `character` parameter allows pre-filter data frame object (provided argument `refdb`) based taxonomic name, must present records table object. scaling `logical` modifies height bars according sequence count refdb object, thus, used `level` parameter, heigth bars different wraps can compared. Defaults `TRUE`.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/plot_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the length reduction for the downloaded sequences as a Bar plot — plot_length","text":"`ggplot` Bar plot, can assigned modified using   package `ggplot2` `ggridges`.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/plot_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the length reduction for the downloaded sequences as a Bar plot — plot_length","text":"","code":"tax <- get_ncbi_taxonomy(\"Dissostichus mawsoni\") rec <- download_ncbi(tax, ask = FALSE)  plot_length(rec)"},{"path":"https://matteoce.github.io/barcodeMineR/reference/plot_primers.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the primers' names as a Bubble plot — plot_primers","title":"Show the primers' names as a Bubble plot — plot_primers","text":"function plot primer name present object provided `refdb` argument x axis, showing number records size circles, color intensity circle given length `\"average\"` `\"range\"` sequences amplified using primer. function inspired modified code presented paper Gwiazdowski et al. (2015) https://doi.org/10.1371/journal.pone.0125635.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/plot_primers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the primers' names as a Bubble plot — plot_primers","text":"","code":"plot_primers(   refdb,   level = \"phylum\",   select = NULL,   size_range = NULL,   measure = \"average\",   tax.fct.levels = NULL,   prim.fct.levels = NULL )"},{"path":"https://matteoce.github.io/barcodeMineR/reference/plot_primers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the primers' names as a Bubble plot — plot_primers","text":"refdb `data.frame` data frame object, recovered `download_ncbi`, `download_bold` `loadBarcodeOre` functions. level `character` character string indicating taxonomic level x axis refer . one \"phylum\", \"class\", \"order\", \"family\" \"genus\". Defaults `phylum`. select `character` parameter allows pre-filter refdb object based taxonomic name. Defaults `NULL`. size_range `integer` allows change size bubbles. vector length two supplied. Defaults `NULL`, translates `c(2, 30)`. measure `character` Either `\"range\"` `\"average\"`. first case, range length sequences records filtered combination primer taxonomic name shown. average length shown otherwise. Defaults `\"average\"`. tax.fct.levels `character` vector taxonomic names allows re-order x axis based custom order. prim.fct.levels `character` vector primers' names allows re-order y axis based custom order.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/plot_primers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the primers' names as a Bubble plot — plot_primers","text":"`ggplot` Bubble plot, can assigned modified   using package `ggplot2`.","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/plot_primers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the primers' names as a Bubble plot — plot_primers","text":"","code":"rec <- loadBarcodeOre(example_record, example_sequence)  plot_primers(rec)"},{"path":"https://matteoce.github.io/barcodeMineR/reference/species200.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset of 200 species names — species200","title":"Example dataset of 200 species names — species200","text":"example dataset, including vector 207 species Ross Sea (Antarctica, Southern Ocean), yield NCBI records numbers 10 30 (approximately), fasta sequences never exceeding 2000 base pairs (bp) length, never 100 bp (12 Jun 2024).","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/species200.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset of 200 species names — species200","text":"","code":"species200"},{"path":"https://matteoce.github.io/barcodeMineR/reference/species200.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset of 200 species names — species200","text":"## `species200` character vector 207 species Ross Sea (Antarctica).","code":""},{"path":"https://matteoce.github.io/barcodeMineR/reference/species200.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example dataset of 200 species names — species200","text":"generated manually, consult `data_raw` directory details","code":""}]
